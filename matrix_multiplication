class matrix_multiplication{
	public static int multiplication(int input[]){
		if(input.length == 0){
			return 0;
		}
		int n = input.length;
		int dp[][] = new int[n][n];
		for(int len = 2; len < n; len++){
			for(int i = 1 ; i < n - len + 1; i++){
				int j = i + len - 1;
				if(j == n) continue;
				 dp[i][j] = Integer.MAX_VALUE;
				for(int k = i; k <= j - 1; k++){
					dp[i][j] = Math.min(dp[i][j], dp[i][k] + dp[k + 1][j] + input[i - 1] * input[k] * input[j]);
				}
			}
		}
		for(int i = 0 ; i < n; i++){
			for(int j = 0 ; j < n; j++){
				System.out.print(dp[i][j] + " ");
			}
			System.out.println();
		}
		return dp[1][n - 1];
	}

	public static int MatrixChainOrder(int p[], int i, int j, int dp[][])
    {
        if (i == j)
            return 0;
 		if(dp[i][j] != 0){
 			return dp[i][j];
 		}
        int min = Integer.MAX_VALUE;
 
        // place parenthesis at different places between first
        // and last matrix, recursively calculate count of
        // multiplications for each parenthesis placement and
        // return the minimum count
        for (int k=i; k<j; k++)
        {
            int count = MatrixChainOrder(p, i, k, dp) +
                        MatrixChainOrder(p, k+1, j, dp) +
                        p[i-1]*p[k]*p[j];
 
            if (count < min)
                min = count;
        }
 		dp[i][j] = min;
        // Return minimum count
        return min;
    }
	public static void main(String args[]){
		int input[] = new int[]{1,7,3,5,1,3,4,5,7,2,5,3,5,7,4,3,5,6,2,34};
		int res = multiplication(input);
		int n = input.length;
		int res2 = MatrixChainOrder(input, 1, input.length - 1, new int[n][n]);
		System.out.println(res);
		System.out.println(res2);
	}
}

