dp + dfs
public class Solution {
    public List<String> wordBreak(String s, Set<String> wordDict) {
        int n = s.length();
        boolean dp[] = new boolean[n + 1];
        dp[0] = true;
        for(int i = 0 ; i <= n; i++){
            for (int j = i; j > 0; j--) {
                if (dp[j - 1] && wordDict.contains(s.substring(j - 1, i))) {
                    dp[i] = true;
                    break;
                }
            }
        }
        if(!dp[n]){
            return new ArrayList<String>();
        }
        List<String> res = new ArrayList<String>();
        helper(s, wordDict, dp, 0, res, new ArrayList<String>());
        return res;
    }
    
    public void helper(String s, Set<String> wordDict, boolean dp[], int pos, List<String> res, List<String> list){
        if(!dp[pos]){
            return;
        }
        if(pos == s.length()){
           StringBuilder st = new StringBuilder();
           for(int i = 0 ; i < list.size(); i++){
               st.append(list.get(i));
               st.append(" ");
           }
           st.deleteCharAt(st.length() - 1);
           res.add(st.toString());
           return;
        }
        for(int i = pos + 1; i <= s.length(); i++){
            String t = s.substring(pos, i);
            if(wordDict.contains(t)){
                list.add(t);
                helper(s, wordDict, dp, i, res, list);
                list.remove(list.size() - 1);
            }
        }
    }
}
