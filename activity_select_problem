//sort activities by finish time 
//define asp(i) as the max total revenue of a mutually compatible subset of a1....ai,
//function asp(i) = 0 if i == 0
//         asp(i) = max(asp(i - 1), //not select i
//                      pi + asp(j))  // select i
//there are two method to search the compatible interval
//one is use the linear scan, the time complexity will be O(n^2)
//another one use the binary search, the time complexity will be O(nlogn)
import java.util.*;
class activitySelectProblem{
	public static void main(String args[]){
		int activity[][] = new int[][]{
			{1,4,3},
			{3,5,2},
			{0,6,6},
			{5,7,2},
			{3,8,5},
			{5,9,4},
			{6,10,4},
			{8,11,3},
			{8,12,4},
			{2,13,11},
			{12,14,2}
		};
		
		int max1 = weightedActivitySelection1(activity);
		//you can use binary search when search the compatible interval
		//running time will be O(nlogn)
		int max2 = weightedActivitySelection2(activity);
		System.out.println(max1);
		System.out.println(max2);
	}

	public static int weightedActivitySelection1(int act[][]){
		if(act.length == 0){
			return 0;
		}
		Arrays.sort(act, new Comparator<int[]>(){//sort by end time
			public int compare(int a[], int b[]){
				return a[1] - b[1];
			}
		});
		int res[] = new int[act.length];
		res[0] = act[0][2];
		for(int i = 1; i < act.length; i++){
			res[i] = res[i - 1]; // ai is not selected
			int j = i - 1;
			while(j >= 0 && act[j][1] > act[i][0]){// aj is the first interval that compatible with ai from right to left
				j--;
			}
			if(j == -1){
				if(act[i][2] > res[i]){
					res[i] = act[i][2];//ai is selected
				}

			}else{
				if(act[i][2] + res[j] > res[i]){
					res[i] = res[j] + act[i][2];
				}
			}
		}
		return res[res.length - 1];
	}

	public static int weightedActivitySelection2(int act[][]){
		if(act.length == 0){
			return 0;
		}
		Arrays.sort(act, new Comparator<int[]>(){//sort by end time
			public int compare(int a[], int b[]){
				return a[1] - b[1];
			}
		});
		int res[] = new int[act.length];
		res[0] = act[0][2];
		for(int i = 1; i < act.length; i++){
			res[i] = res[i - 1]; // ai is not selected
			int j = binarySearch(i, act);
			if(j == -1){
				if(act[i][2] > res[i]){
					res[i] = act[i][2];//ai is selected
				}

			}else{
				if(act[i][2] + res[j] > res[i]){
					res[i] = res[j] + act[i][2];
				}
			}
		}
		return res[res.length - 1];
	}

	public static int binarySearch(int index, int [][]arr){
		int left = 0;
		int right = index - 1;
		while(left + 1 < right){
			int mid = left + (right - left) / 2;
			if(arr[mid][1] <= arr[index][0]){
				if(arr[mid + 1][1] <= arr[index][0]){
					left = mid;
				}else{
					return mid;
				}
			}
			else{
				right = mid;
			}
		}
		if(arr[right][1] <= arr[index][0]){
			return right;
		}
		else if(arr[left][1] <= arr[index][0]){
			return left;
		}
		// System.out.println(arr[left][1] + " " + arr[right][1] + " " + arr[index][0]); 
		return -1;
	}
}
